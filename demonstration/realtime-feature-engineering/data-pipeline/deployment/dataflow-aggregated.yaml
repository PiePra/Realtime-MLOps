apiVersion: v1
data:
  dataflow-aggregated.py: "import json\nfrom dataclasses import dataclass, field\nfrom
    datetime import datetime, timedelta\nfrom typing import Tuple, List\n\nimport
    pandas as pd\nimport requests\nimport sqlalchemy\nfrom bytewax.dataflow import
    Dataflow\nfrom bytewax.execution import run_main\nfrom bytewax.inputs import KafkaInputConfig\nfrom
    bytewax.outputs import ManualOutputConfig\nfrom bytewax.window import SystemClockConfig,
    TumblingWindowConfig\nfrom cloudevents.conversion import to_structured\nfrom cloudevents.http
    import CloudEvent\nfrom feast import FeatureStore\nfrom sqlalchemy import create_engine\n\n#Kafka
    Input\nKAFKA_BOOTSTRAP_SERVERS=[\"streaming-system-kafka-0.kafka.svc.cluster.local:9094\"]\nKAFKA_TOPIC=\"knative-broker-default-crypto\"\n\n#Feast
    Config\nFEAST_PATH=\"./feature-repo\"\nFEAST_FEATURE_VIEW=\"crypto_stats\"\nFEAST_SOURCE_TABLE=\"crypto_source\"\n\n#Feast
    Offline Store\nDB_TYPE=\"postgresql\"\nPG_USER=\"feast\"\nPG_PASS=\"feast\"\nPG_HOST=\"offline-store-postgresql.feast.svc.cluster.local\"\nPG_PORT=\"5432\"\nPG_DB=\"feast\"\n\n#Output
    Broker Ingress\nKAFKA_BROKER_INGRESS=\"http://kafka-broker-ingress.knative-eventing.svc.cluster.local/default/crypto-prediction\"\n\n#CloudEvent
    Attributes\nCE_ATTR_TYPE=\"cluster.local.aggregated_\"\nCE_ATTR_SOURCE=\"https://cluster.local/dataflow\"\n\n@dataclass\nclass
    OHLC:\n    \"\"\"Class representing output Feature Vector\"\"\"\n    symbol: str\n
    \   open: float\n    high: float\n    low: float\n    close: float\n    timestamp_created:
    datetime\n    timestamp: datetime = field(default_factory=datetime.utcnow().timestamp)\n\n@dataclass\nclass
    PriceMessage:\n    \"\"\"Class representing a Price for given Time\"\"\"\n    price:
    float\n    timestamp: datetime\n\ndef get_message(msg: Tuple[str, Tuple]) -> Tuple[str,
    PriceMessage]:\n    \"\"\"Formats msg to use symbol as key and content as tuple\"\"\"\n
    \   key, val = msg\n    key = json.loads(val) \n    msg = key\n    yield msg[\"symbol\"],
    PriceMessage(msg[\"price\"], msg[\"timestamp\"])  \n\ndef append_price(prices:
    List[Tuple[str, PriceMessage]], price: Tuple[str, PriceMessage]):\n    \"\"\"Appends
    price to list of prices\"\"\"\n    prices.append(price)\n    return prices\n\ndef
    get_vals(msg: List[Tuple[str, PriceMessage]]) -> OHLC:\n    \"\"\"\"Get OHLC Data
    from prices\"\"\"\n    key, price_message = msg\n    prices = [item.price for
    item in price_message]\n    timestamps = [item.timestamp for item in price_message]\n\n
    \   output = OHLC(\n        symbol=key,\n        low=min(prices),\n        high=max(prices),\n
    \       open=prices[0],\n        close=prices[-1],\n        timestamp_created=timestamps[-1]\n
    \   )\n    return output\n\ndef get_engine() -> sqlalchemy.engine.Engine:\n    \"\"\"Create
    DB Connection Engine\"\"\"\n    return create_engine(f\"{DB_TYPE}://{PG_USER}:{PG_PASS}@{PG_HOST}:{PG_PORT}/{PG_DB}\")\n\ndef
    get_feature_store() -> FeatureStore:\n    \"\"\"Create Feature Store Object\"\"\"\n
    \   return FeatureStore(FEAST_PATH)\n\ndef get_cloudevent(data: OHLC) -> CloudEvent:\n
    \   \"\"\"Create the Cloudevent from attributes and data\"\"\"\n    attributes
    = {\n        \"type\": f\"{CE_ATTR_TYPE}_\",\n        \"source\": CE_ATTR_SOURCE,\n
    \   }\n    event = data.__dict__.copy()\n    event[\"type\"]=\"ground_truth\"\n    return
    CloudEvent(attributes, event)\n\ndef get_df(data: OHLC) -> pd.DataFrame:\n    \"\"\"Create
    pandas dataframe to send to feast\"\"\"\n    data_dict = data.__dict__.copy()\n    for
    key in data_dict.keys():\n        data_dict[key] = [data_dict[key]]\n    df =
    pd.DataFrame(data_dict)\n    df[\"timestamp\"] = df[\"timestamp\"].astype('datetime64[s]')\n
    \   df[\"timestamp_created\"] = df[\"timestamp_created\"].astype('datetime64[s]')\n
    \   return df\n\ndef output_builder(worker_index: int, worker_count: int) -> callable:\n
    \   \"\"\"Build the function to write to feast\"\"\"\n    engine = get_engine()\n
    \   store = get_feature_store()\n    def write(item: OHLC):\n        df = get_df(item)\n
    \       # Write to online store\n        store.write_to_online_store(FEAST_FEATURE_VIEW,
    df)\n        # Post Event to Broker Ingress\n        event = get_cloudevent(item)\n
    \       headers, body = to_structured(event)\n        requests.post(KAFKA_BROKER_INGRESS,
    data=body, headers=headers)\n        # Write offline store (directly to sql table
    as write_to_offline_store not implemented for postgresql yet)\n        df.to_sql(FEAST_SOURCE_TABLE,
    engine, if_exists='append', index=False)\n    return write\n\ndef run_dataflow()
    -> None:\n    \"\"\"Main function to run the dataflow\"\"\"\n    cc = SystemClockConfig()\n
    \   wc = TumblingWindowConfig(length=timedelta(minutes=5))\n    input_config =
    KafkaInputConfig(KAFKA_BOOTSTRAP_SERVERS, KAFKA_TOPIC, tail=True, starting_offset=\"end\")\n
    \   flow = Dataflow()\n    flow.input(\"input\", input_config)\n    flow.flat_map(get_message)\n
    \   flow.fold_window(\"session_state_recovery\", cc, wc, list, append_price)\n
    \   flow.map(get_vals)\n    flow.capture(ManualOutputConfig(output_builder))\n
    \   run_main(flow)\n\nif __name__ == \"__main__\":\n    run_dataflow()\n"
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: bytewax
    meta.helm.sh/release-namespace: feast
  labels:
    app.kubernetes.io/instance: bytewax
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: bytewax
    bytewax.io/managed-by: waxctl
    bytewax.io/waxctl-version: 0.4.0
  name: bytewax
  namespace: feast
---
# Source: bytewax/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bytewax
  namespace: feast
  labels:
    helm.sh/chart: bytewax-0.3.1
    app.kubernetes.io/name: bytewax
    app.kubernetes.io/instance: bytewax
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: Helm
    bytewax.io/managed-by: waxctl
    bytewax.io/waxctl-version: 0.4.0
imagePullSecrets:
    - name: default-credentials
---
# Source: bytewax/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: bytewax
  namespace: feast
  labels:
    helm.sh/chart: bytewax-0.3.1
    app.kubernetes.io/name: bytewax
    app.kubernetes.io/instance: bytewax
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: Helm
    bytewax.io/managed-by: waxctl
    bytewax.io/waxctl-version: 0.4.0
spec:
  ports:
  - port: 9999
    name: worker
  clusterIP: None
  selector:
    app.kubernetes.io/name: bytewax
    app.kubernetes.io/instance: bytewax
---
# Source: bytewax/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: bytewax
  namespace: feast
  labels:
    helm.sh/chart: bytewax-0.3.1
    app.kubernetes.io/name: bytewax
    app.kubernetes.io/instance: bytewax
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: Helm
    bytewax.io/managed-by: waxctl
    bytewax.io/waxctl-version: 0.4.0  
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bytewax
      app.kubernetes.io/instance: bytewax
  serviceName: "bytewax"
  podManagementPolicy: "Parallel"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bytewax
        app.kubernetes.io/instance: bytewax      
    spec:
      affinity:
        {}
      imagePullSecrets:
        - name: default-credentials
      serviceAccountName: bytewax
      securityContext:
        fsGroup: 2000
        runAsGroup: 3000
        runAsNonRoot: true
        runAsUser: 65532
      tolerations:
        []
      initContainers:
      - name: init-hostfile
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true      
        env:
        - name: BYTEWAX_REPLICAS
          value: "1"
        image: busybox
        command:
        - sh
        - "-c"
        - |
          set -ex
          # Generate hostfile.txt.
          echo "bytewax-0.bytewax.feast.svc.cluster.local:9999" > /etc/bytewax/hostfile.txt
          replicas=$(($BYTEWAX_REPLICAS-1))
          x=1
          while [ $x -le $replicas ]
          do
            echo "bytewax-$x.bytewax.feast.svc.cluster.local:9999" >> /etc/bytewax/hostfile.txt
            x=$(( $x + 1 ))
          done
          # Copy python files to working directory
          cp /tmp/bytewax/. /var/bytewax -R
          cd /var/bytewax
          tar -xvf *.tar || echo "No tar files found."
        volumeMounts:
        - name: hostfile
          mountPath: /etc/bytewax
        - name: working-directory
          mountPath: /var/bytewax/
        - name: python-files
          mountPath: /tmp/bytewax/
      terminationGracePeriodSeconds: 10
      containers:
      - name: process    
        image: "docker.io/piepra/bytewax:0.11.2-python3.8"
        imagePullPolicy: Always
        command: ["sh","-c","sh ./entrypoint.sh"]
        ports:
        - containerPort: 9999
          name: process
        env:
        - name: RUST_LOG
          value: "librdkafka=debug,rdkafka::client=debug"
        - name: RUST_BACKTRACE
          value: "full"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: BYTEWAX_PYTHON_FILE_PATH
          value: "/var/bytewax/dataflow-aggregated.py"
        - name: BYTEWAX_WORKDIR
          value: "/var/bytewax"
        - name: BYTEWAX_WORKERS_PER_PROCESS
          value: "1"
        - name: BYTEWAX_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: BYTEWAX_REPLICAS
          value: "1"
        - name: BYTEWAX_KEEP_CONTAINER_ALIVE
          value: "true"
        - name: BYTEWAX_HOSTFILE_PATH
          value: "/etc/bytewax/hostfile.txt"
        - name: BYTEWAX_STATEFULSET_NAME
          value: "bytewax"
        resources:
            {}
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true         
        volumeMounts:
        - name: hostfile
          mountPath: /etc/bytewax
        - name: working-directory
          mountPath: /var/bytewax/
        - name: feature-store
          mountPath: /var/bytewax/feature-repo/feature_store.yaml
          subPath: feature_store.yaml
      volumes:
      - name: hostfile
        emptyDir: {}
      - name: python-files
        configMap:
          name: bytewax
      - name: working-directory
        emptyDir: {}
      - name: feature-store
        configMap:
          name: feature-store

