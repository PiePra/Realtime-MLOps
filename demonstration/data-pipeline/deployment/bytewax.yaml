apiVersion: v1
data:
  dataflow.py: "import json\nfrom datetime import datetime, timedelta\nimport logging\nimport
    pandas as pd\nfrom sqlalchemy import create_engine\nfrom bytewax.dataflow import
    Dataflow\nfrom bytewax.execution import run_main\nfrom bytewax.inputs import KafkaInputConfig,
    TestingInputConfig\nfrom bytewax.outputs import StdOutputConfig, ManualOutputConfig\nfrom
    bytewax.window import (SystemClockConfig, TumblingWindowConfig, TestingClockConfig)\nfrom
    feast import FeatureStore\nfrom bytewax.window import ClockConfig\n\ndef get_message(msg):\n
    \   key, val = msg\n    key = json.loads(val) \n    msg = key\n    yield (msg[\"symbol\"],
    (msg[\"price\"], msg[\"timestamp\"]))  \n\ndef append_price(prices, price):\n
    \   prices.append(price)\n    return prices\n\ndef get_vals(msg):\n    key, msg
    = msg\n    prices = [item[0] for item in msg]\n    timestamps = [item[1] for item
    in msg]\n\n    output = pd.DataFrame([{\n        \"symbol\": key,\n        \"low\":
    min(prices),\n        \"high\": max(prices),\n        \"open\": prices[0],\n        \"close\":
    prices[-1],\n        \"timestamp\": datetime.now().timestamp(),\n        \"timestamp_created\":
    timestamps[-1]\n    }])\n    output[\"timestamp\"] = output[\"timestamp\"].astype('datetime64[s]')\n
    \   output[\"timestamp_created\"] = output[\"timestamp_created\"].astype('datetime64[s]')\n
    \   return output\n\ndef output_builder(worker_index, worker_count):\n    store
    = FeatureStore('./feature-repo')\n    engine = create_engine('postgresql://feast:feast@offline-store-postgresql.feast.svc.cluster.local:5432/feast')\n
    \   def write(item):\n        store.write_to_online_store(\"crypto_stats\", item,
    allow_registry_cache = True)\n        # Write to offline store for posotgres not
    implemented in feast 0.25 yet\n        #store.write_to_offline_store(\"crypto_stats\",
    item, allow_registry_cache = True)\n        item.to_sql(\"crypto_source\", engine,
    if_exists='append', index=False)\n        logging.info(f\"worker {worker_index}
    created - {item}\")\n    return write\n\n\nif __name__ == \"__main__\":\n    cc
    = TestingClockConfig(start_at=datetime(2022, 1, 1, 13), item_incr = timedelta(minutes=1))\n
    \   cc = SystemClockConfig()\n    wc = TumblingWindowConfig(length=timedelta(minutes=5))\n
    \   input_config = KafkaInputConfig([\"streaming-system-kafka-0.kafka.svc.cluster.local:9094\"],
    \"knative-broker-default-crypto\", tail=True, starting_offset=\"end\")\n    flow
    = Dataflow()\n    flow.input(\"input\", input_config)\n    flow.flat_map(get_message)\n
    \   flow.fold_window(\"session_state_recovery\", cc, wc, list, append_price)\n
    \   flow.map(get_vals)\n    flow.capture(ManualOutputConfig(output_builder))\n
    \   run_main(flow)\n"
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: bytewax
    meta.helm.sh/release-namespace: feast
  labels:
    app.kubernetes.io/instance: bytewax
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: bytewax
    bytewax.io/managed-by: waxctl
    bytewax.io/waxctl-version: 0.4.0
  name: bytewax
  namespace: feast
---
# Source: bytewax/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bytewax
  namespace: feast
  labels:
    helm.sh/chart: bytewax-0.3.1
    app.kubernetes.io/name: bytewax
    app.kubernetes.io/instance: bytewax
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: Helm
    bytewax.io/managed-by: waxctl
    bytewax.io/waxctl-version: 0.4.0
imagePullSecrets:
    - name: default-credentials
---
# Source: bytewax/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: bytewax
  namespace: feast
  labels:
    helm.sh/chart: bytewax-0.3.1
    app.kubernetes.io/name: bytewax
    app.kubernetes.io/instance: bytewax
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: Helm
    bytewax.io/managed-by: waxctl
    bytewax.io/waxctl-version: 0.4.0
spec:
  ports:
  - port: 9999
    name: worker
  clusterIP: None
  selector:
    app.kubernetes.io/name: bytewax
    app.kubernetes.io/instance: bytewax
---
# Source: bytewax/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: bytewax
  namespace: feast
  labels:
    helm.sh/chart: bytewax-0.3.1
    app.kubernetes.io/name: bytewax
    app.kubernetes.io/instance: bytewax
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: Helm
    bytewax.io/managed-by: waxctl
    bytewax.io/waxctl-version: 0.4.0  
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bytewax
      app.kubernetes.io/instance: bytewax
  serviceName: "bytewax"
  podManagementPolicy: "Parallel"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bytewax
        app.kubernetes.io/instance: bytewax      
    spec:
      affinity:
        {}
      imagePullSecrets:
        - name: default-credentials
      serviceAccountName: bytewax
      securityContext:
        fsGroup: 2000
        runAsGroup: 3000
        runAsNonRoot: true
        runAsUser: 65532
      tolerations:
        []
      initContainers:
      - name: init-hostfile
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true      
        env:
        - name: BYTEWAX_REPLICAS
          value: "1"
        image: busybox
        command:
        - sh
        - "-c"
        - |
          set -ex
          # Generate hostfile.txt.
          echo "bytewax-0.bytewax.feast.svc.cluster.local:9999" > /etc/bytewax/hostfile.txt
          replicas=$(($BYTEWAX_REPLICAS-1))
          x=1
          while [ $x -le $replicas ]
          do
            echo "bytewax-$x.bytewax.feast.svc.cluster.local:9999" >> /etc/bytewax/hostfile.txt
            x=$(( $x + 1 ))
          done
          # Copy python files to working directory
          cp /tmp/bytewax/. /var/bytewax -R
          cd /var/bytewax
          tar -xvf *.tar || echo "No tar files found."
        volumeMounts:
        - name: hostfile
          mountPath: /etc/bytewax
        - name: working-directory
          mountPath: /var/bytewax/
        - name: python-files
          mountPath: /tmp/bytewax/
      terminationGracePeriodSeconds: 10
      containers:
      - name: process    
        image: "docker.io/piepra/bytewax:0.11.2-python3.8"
        imagePullPolicy: Always
        command: ["sh","-c","sh ./entrypoint.sh"]
        ports:
        - containerPort: 9999
          name: process
        env:
        - name: RUST_LOG
          value: "librdkafka=debug,rdkafka::client=debug"
        - name: RUST_BACKTRACE
          value: "full"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: BYTEWAX_PYTHON_FILE_PATH
          value: "/var/bytewax/dataflow.py"
        - name: BYTEWAX_WORKDIR
          value: "/var/bytewax"
        - name: BYTEWAX_WORKERS_PER_PROCESS
          value: "1"
        - name: BYTEWAX_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: BYTEWAX_REPLICAS
          value: "1"
        - name: BYTEWAX_KEEP_CONTAINER_ALIVE
          value: "true"
        - name: BYTEWAX_HOSTFILE_PATH
          value: "/etc/bytewax/hostfile.txt"
        - name: BYTEWAX_STATEFULSET_NAME
          value: "bytewax"
        resources:
            {}
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true         
        volumeMounts:
        - name: hostfile
          mountPath: /etc/bytewax
        - name: working-directory
          mountPath: /var/bytewax/
        - name: feature-store
          mountPath: /var/bytewax/feature-repo/feature_store.yaml
          subPath: feature_store.yaml
      volumes:
      - name: hostfile
        emptyDir: {}
      - name: python-files
        configMap:
          name: bytewax
      - name: working-directory
        emptyDir: {}
      - name: feature-store
        configMap:
          name: feature-store

