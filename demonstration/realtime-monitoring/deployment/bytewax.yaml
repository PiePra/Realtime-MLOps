apiVersion: v1
data:
  dataflow-eval.py: "from bytewax.dataflow import Dataflow\nfrom bytewax.execution
    import run_main\nfrom bytewax.inputs import KafkaInputConfig\nfrom bytewax.outputs
    import ManualOutputConfig, StdOutputConfig\nimport pandas as pd\nfrom sqlalchemy
    import create_engine\nimport json\nfrom datetime import datetime\n\ndef get_message(msg):\n
    \   key, val = msg\n    val = json.loads(val) \n    yield (val[\"symbol\"], [val])\n\ndef
    extend_session(session, events):\n    session.extend(events)\n    return session\n\ndef
    session_complete(session):\n    return any(event[\"type\"] == \"ground_truth\"
    for event in session)\n\ndef get_metric(session):\n    key, msg = session\n    out
    = []\n    if len(msg) > 1:\n        y = msg[-1][\"close\"]\n        symbol = msg[-1][\"symbol\"]\n
    \       for line in msg:\n            if line[\"type\"] == \"response\":\n                y_hat
    = line[\"outputs\"][0][\"data\"][0]\n                diff = y - y_hat\n                if
    diff < 0:\n                    diff = diff * -1\n                temp = {\"type\":
    \"eval\",\n                \"symbol\": symbol,\n                \"y\": y,\n                \"y_hat\":
    y_hat,\n                \"diff\": diff,\n                \"model_name\": line[\"model_name\"],\n
    \               \"model_version\": line[\"model_version\"],\n                \"timestamp\":
    datetime.utcnow().timestamp()\n                }\n                out.append(temp)\n
    \   return(out)\n\ndef output(worker_index, worker_count):\n    engine = create_engine('postgresql://feast:feast@offline-store-postgresql.feast.svc.cluster.local:5432/feast')\n
    \   def write(item):\n        df = pd.DataFrame([item])\n        df.to_sql(\"metrics\",
    engine, if_exists='append', index=False)\n\n    return write\n\nif __name__ ==
    \"__main__\":\n    input_config = KafkaInputConfig([\"streaming-system-kafka-0.kafka.svc.cluster.local:9094\"],
    \"knative-broker-default-crypto-prediction\", tail=True, starting_offset=\"end\")\n
    \   flow = Dataflow()\n    flow.input(\"input\", input_config)\n    flow.flat_map(get_message)\n
    \   flow.reduce(\"sessionizer\", extend_session, session_complete)\n    flow.map(get_metric)\n
    \   flow.flat_map(lambda s: s)\n    flow.capture(ManualOutputConfig(output))\n
    \   run_main(flow)"
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: bytewax
    meta.helm.sh/release-namespace: default
  labels:
    app.kubernetes.io/instance: bytewax
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: bytewax
    bytewax.io/managed-by: waxctl
    bytewax.io/waxctl-version: 0.4.0
  name: bytewax
  namespace: default
---
# Source: bytewax/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bytewax
  namespace: default
  labels:
    helm.sh/chart: bytewax-0.3.1
    app.kubernetes.io/name: bytewax
    app.kubernetes.io/instance: bytewax
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: Helm
    bytewax.io/managed-by: waxctl
    bytewax.io/waxctl-version: 0.4.0
imagePullSecrets:
    - name: default-credentials
---
# Source: bytewax/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: bytewax
  namespace: default
  labels:
    helm.sh/chart: bytewax-0.3.1
    app.kubernetes.io/name: bytewax
    app.kubernetes.io/instance: bytewax
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: Helm
    bytewax.io/managed-by: waxctl
    bytewax.io/waxctl-version: 0.4.0
spec:
  ports:
  - port: 9999
    name: worker
  clusterIP: None
  selector:
    app.kubernetes.io/name: bytewax
    app.kubernetes.io/instance: bytewax
---
# Source: bytewax/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: bytewax
  namespace: default
  labels:
    helm.sh/chart: bytewax-0.3.1
    app.kubernetes.io/name: bytewax
    app.kubernetes.io/instance: bytewax
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: Helm
    bytewax.io/managed-by: waxctl
    bytewax.io/waxctl-version: 0.4.0  
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bytewax
      app.kubernetes.io/instance: bytewax
  serviceName: "bytewax"
  podManagementPolicy: "Parallel"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bytewax
        app.kubernetes.io/instance: bytewax      
    spec:
      affinity:
        {}
      imagePullSecrets:
        - name: default-credentials
      serviceAccountName: bytewax
      securityContext:
        fsGroup: 2000
        runAsGroup: 3000
        runAsNonRoot: true
        runAsUser: 65532
      tolerations:
        []
      initContainers:
      - name: init-hostfile
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true      
        env:
        - name: BYTEWAX_REPLICAS
          value: "1"
        image: busybox
        command:
        - sh
        - "-c"
        - |
          set -ex
          # Generate hostfile.txt.
          echo "bytewax-0.bytewax.default.svc.cluster.local:9999" > /etc/bytewax/hostfile.txt
          replicas=$(($BYTEWAX_REPLICAS-1))
          x=1
          while [ $x -le $replicas ]
          do
            echo "bytewax-$x.bytewax.default.svc.cluster.local:9999" >> /etc/bytewax/hostfile.txt
            x=$(( $x + 1 ))
          done
          # Copy python files to working directory
          cp /tmp/bytewax/. /var/bytewax -R
          cd /var/bytewax
          tar -xvf *.tar || echo "No tar files found."
        volumeMounts:
        - name: hostfile
          mountPath: /etc/bytewax
        - name: working-directory
          mountPath: /var/bytewax/
        - name: python-files
          mountPath: /tmp/bytewax/
      terminationGracePeriodSeconds: 10
      containers:
      - name: process    
        image: "docker.io/piepra/bytewax:0.11.2-python3.8"
        imagePullPolicy: Always
        command: ["sh","-c","sh ./entrypoint.sh"]
        ports:
        - containerPort: 9999
          name: process
        env:
        - name: RUST_LOG
          value: "librdkafka=debug,rdkafka::client=debug"
        - name: RUST_BACKTRACE
          value: "full"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: BYTEWAX_PYTHON_FILE_PATH
          value: "/var/bytewax/dataflow-eval.py"
        - name: BYTEWAX_WORKDIR
          value: "/var/bytewax"
        - name: BYTEWAX_WORKERS_PER_PROCESS
          value: "1"
        - name: BYTEWAX_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: BYTEWAX_REPLICAS
          value: "1"
        - name: BYTEWAX_KEEP_CONTAINER_ALIVE
          value: "true"
        - name: BYTEWAX_HOSTFILE_PATH
          value: "/etc/bytewax/hostfile.txt"
        - name: BYTEWAX_STATEFULSET_NAME
          value: "bytewax"
        resources:
            {}
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true         
        volumeMounts:
        - name: hostfile
          mountPath: /etc/bytewax
        - name: working-directory
          mountPath: /var/bytewax/
      volumes:
      - name: hostfile
        emptyDir: {}
      - name: python-files
        configMap:
          name: bytewax
      - name: working-directory
        emptyDir: {}

